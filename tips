halt all machines
example:
vtraida$ vagrant global-status | grep virtualbox | cut -c 1-9 | while read line; do echo $line; vagrant halt $line; done;
f308e38
==> srv_eva: Attempting graceful shutdown of VM...
5fa28c7
==> default: Attempting graceful shutdown of VM...
4631bfb
==> default: Attempting graceful shutdown of VM...

vtraida$ vagrant global-status
id       name    provider   state    directory                           
-------------------------------------------------------------------------
f308e38  srv_eva virtualbox poweroff /Users/vtraida/vagrantspace/2       
5fa28c7  default virtualbox poweroff /Users/vtraida/vagrantspace/centos  
4631bfb  default virtualbox poweroff /Users/vtraida/vagrantspace/centos6 

-global-status lists all boxes
-filter that for lines containing virtualbox (Filters out the help text, will break if you're using some other provider)
-Filter that to display only the first 9 characters (the global unique ID)
-While we can still read a line from that input, read it as the variable $line then:
--Print out that $line
--run vagrant halt $line halting the vagrant for that global unique ID


***

Vagrant, auto-update VirtualBox Guest Additions
After updating your VirtualBox installation might get the following message after when starting you box with vagrant up:

'The guest additions on this VM do not match the install version of VirtualBox!'

Most of the time everything will keep working just fine and you can ignore this message. But when it doesn't (ie. your mounts won't work anymore), you need to update you guest additions.

Fortunately there is the Vbguest plugin!

Just go to the directory where your Vagrantfile is located. And type the following:

$ vagrant plugin install vagrant-vbguest
Now every time you start you box with vagrant up your box will check if your Guest Additions version matches the one of your host, if not, it will update them automatically.

More info on the Vbguest plugin can be found on their Github repository: https://github.com/dotless-de/vagrant-vbguest

***
Kill all running Vagrant VMs

In case you want to indiscriminately destroy all of the running Vagrant VMs on your machine, you can run the following:

vtraida$ for i in `vagrant global-status | grep virtualbox | awk '{ print $1 }'` ; do vagrant destroy $i ; done
    srv_eva: Are you sure you want to destroy the 'srv_eva' VM? [y/N] y
==> srv_eva: Destroying VM and associated drives...
    default: Are you sure you want to destroy the 'default' VM? [y/N] y
==> default: Destroying VM and associated drives...
    default: Are you sure you want to destroy the 'default' VM? [y/N] y
==> default: Destroying VM and associated drives...

***

install vagrant on Ubuntu from terminal by curl

sudo apt install curl


For servers, the following will first authenticate and then install Vagrant version 2.0.2 (currently the latest) on Ubuntu x64:

curl -O https://releases.hashicorp.com/vagrant/2.0.2/vagrant_2.0.2_x86_64.deb
curl -O https://releases.hashicorp.com/vagrant/2.0.2/vagrant_2.0.2_SHA256SUMS
curl -O https://releases.hashicorp.com/vagrant/2.0.2/vagrant_2.0.2_SHA256SUMS.sig
curl -sS https://keybase.io/hashicorp/key.asc | gpg --import
gpg --verify vagrant_2.0.2_SHA256SUMS.sig vagrant_2.0.2_SHA256SUMS
shasum -a 256 -c <(cat vagrant_2.0.2_SHA256SUMS | grep 64.deb) -s
sudo apt install ./vagrant_2.0.2_x86_64.deb
